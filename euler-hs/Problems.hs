module Problems where

import Control.Monad
import Data.List

{-
Problem 1

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
-}
isMultipleOf :: Int -> Int -> Bool
x `isMultipleOf` y = x `mod` y == 0

main1 :: IO ()
main1 = print answer
  where answer = 
          sum [x | x <- [1 .. 999]
                 , x `isMultipleOf` 3 || x `isMultipleOf` 5] -- 233168

{-
Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
-}
fibs :: [Int]
fibs = 1 : 2 : zipWith (+) fibs (tail fibs)

main2 :: IO ()
main2 = print answer
  where answer = sum $ filter even $ takeWhile (<= 4 * 10 ^ 6) fibs -- 4613732

{-
Problem 3

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
-}
primeFactors :: Integer -> [Integer]
primeFactors n = p n []
  where p x xs = 
          maybe (x : xs)
                (liftM2 p (div x) (: xs))
                (find (`divides` x) [2 .. isqrt x])
        isqrt = truncate . (sqrt :: Double -> Double) . fromIntegral
        x `divides` y = y `mod` x == 0

main3 :: IO ()
main3 = print answer
  where answer = maximum $ primeFactors 600851475143 -- 6857
